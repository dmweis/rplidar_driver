var searchIndex = JSON.parse('{\
"rplidar_driver":{"doc":"Rplidar Driver","t":[13,13,4,13,13,13,13,13,13,6,3,8,3,3,4,3,3,3,13,13,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,12,12,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,0,12,12,11,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,11,11,11,12,12,12,12,12,12,13,13,3,13,13,3,13,13,13,13,13,13,8,8,13,13,6,6,3,4,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,10,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,12,12,12,12,12,12,12,5],"n":["BufferTooSmall","Error","Health","Healthy","IoError","OperationFail","OperationNotSupport","OperationTimeout","ProtocolError","Result","RplidarDevice","RplidarDriver","RplidarHostProtocol","RplidarResponseDeviceInfo","RposError","ScanMode","ScanOptions","ScanPoint","SerialPortError","Warning","angle","angle_z_q14","ans_type","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_motor_ctrl_support","check_motor_ctrl_support","check_motor_ctrl_support_with_timeout","check_motor_ctrl_support_with_timeout","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","core_reset","core_reset","decode","default","default","dist_mm_q2","distance","drop","encode","eq","eq","eq","eq","eq","eq","estimate_encoded_size","firmware_version","flag","fmt","fmt","fmt","fmt","fmt","fmt","force_scan","force_scan","force_scan_with_mode","from","from","from","from","from","from","from","get_all_supported_scan_modes","get_all_supported_scan_modes","get_all_supported_scan_modes_with_timeout","get_all_supported_scan_modes_with_timeout","get_device_health","get_device_health","get_device_health_with_timeout","get_device_health_with_timeout","get_device_info","get_device_info","get_device_info_with_timeout","get_device_info_with_timeout","get_typical_scan_mode","get_typical_scan_mode","get_typical_scan_mode_with_timeout","get_typical_scan_mode_with_timeout","grab_scan","grab_scan","grab_scan_point","grab_scan_point","grab_scan_point_with_timeout","grab_scan_point_with_timeout","grab_scan_with_timeout","grab_scan_with_timeout","hardware_version","id","into","into","into","into","into","into","into","is_sync","is_valid","max_distance","model","name","ne","ne","ne","ne","ne","new","new","open_native_port","open_port","options","partial_cmp","quality","raw_angle","raw_distance","reset_decoder","reset_encoder","rpos_drv","scan_mode","serialnum","set_angle","set_distance","set_motor_pwm","set_motor_pwm","start_motor","start_motor","start_scan","start_scan","start_scan_with_options","start_scan_with_options","start_scan_with_options_and_timeout","start_scan_with_options_and_timeout","start_scan_with_timeout","start_scan_with_timeout","stop","stop","stop_motor","stop_motor","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","us_per_sample","utils","with_mode","with_stream","write_to","0","0","0","0","description","description","BufferTooSmall","BufferTooSmall","Channel","IoError","IoError","Message","OperationFail","OperationFail","OperationNotSupport","OperationNotSupport","OperationTimeout","OperationTimeout","ProtocolDecoder","ProtocolEncoder","ProtocolError","ProtocolError","Result","Result","RingByteBuffer","RposError","RposError","SerialPortError","SerialPortError","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clone","clone","clone_into","clone_into","cmd","current_read_slice","data","decode","encode","eq","eq","estimate_encoded_size","flush","fmt","fmt","fmt","fmt","free_space","from","from","from","from","from","from","into","into","into","into","invoke","is_empty","len","ne","ne","new","new","read","read","read_from","read_until","reset","reset_decoder","reset_encoder","set_dtr_ready","skip_bytes","source","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_capacity","with_data","with_read_buffer_size","write","write","write_to","0","0","0","0","description","description","description","description","sort_scan"],"q":["rplidar_driverrplidar_driver::Health","","rplidar_driver::RposError","","","","rplidar_driver::rpos_drv","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rplidar_driver::rpos_drv::RposError","","","","","","","","rplidar_driver::utils"],"d":["The buffer is too small for message encoding","","Health status of device","","","The execution of operation failed","The device doesn’t support this operation","The execution of operation is timed out","The decoding data is invalid according to current protocol","","Rplidar device driver","","The implementation of RPLIDAR host protocol","Rplidar device info data strcture","","Description of a specific scan mode","Scan options","Scan point in a particular laser scan","","","","","The answer command value of this scan mode (mainly used to …","","","","","","","","","","","","","","","Check if the connected LIDAR supports motor control","Check if the connected LIDAR supports motor control","Check if the connected LIDAR supports motor control with …","Check if the connected LIDAR supports motor control with …","","","","","","","","","","","","","","Reset RPLIDAR core","Reset RPLIDAR core","Decode bytes and return consumed bytes and message","default options","","","","","Encode message into byte array Always encode commands","","","","","","","Estimate encoded message size (must be greater than or …","","","","","","","","","force scan","Make LIDAR scan regardless of it’s spinning or not","force scan with mode","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","get all supported scan modes supported by the LIDAR","get all supported scan modes supported by the LIDAR","get all supported scan modes supported by the LIDAR with …","get all supported scan modes supported by the LIDAR with …","Get LIDAR health information","Get LIDAR health information","Get LIDAR health information","Get LIDAR health information","","get device info of the RPLIDAR","get device info of the RPLIDAR with timeout","get device info of the RPLIDAR with timeout","get typical scan mode of target LIDAR","get typical scan mode of target LIDAR","get typical scan mode of target LIDAR with timeout","get typical scan mode of target LIDAR with timeout","read scan frame","read scan frame","read scan point","read scan point","read scan point with timeout","read scan point with timeout","read scan frame","read scan frame","","The scan mode id","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Max distance of this measurement mode","","The name of the scan mode","","","","","","Construct a new RplidarDevice with channel","","Construct a new RplidarDevice from a serial port address","Construct a new RplidarDriver from a serial port address","Parameters sent to LIDAR. Please use 0 for now","","","","","Reset the decoder status","Reset encoder","RPOS Driver Infrastructure","Specify this field to force use specific scan mode","","","","Set motor PWM (via accessory board)","Set motor PWM (via accessory board)","Start motor","Start motor","start scan","start scan","start scan with options","start scan with options","start scan with options and non-default timeout","start scan with options and non-default timeout","start scan with timeout","start scan with timeout","Stop lidar","Stop lidar","Stop motor","Stop motor","","","","","","","","","","","","","","","","","","","","","","","","","","","","Microseconds per measurement sample","","with specific mode","Construct a new RplidarDevice with stream","Write message to <code>std::io::Write</code> targets","","","","","","","The buffer is too small for message encoding","The buffer is too small for message encoding","Channel encode and decode message with protocol, and send …","","","A message send via channels","The execution of operation failed","The execution of operation failed","The device doesn’t support this operation","The device doesn’t support this operation","The execution of operation is timed out","The execution of operation is timed out","Protocol decoder","Protocol encoder","The decoding data is invalid according to current protocol","The decoding data is invalid according to current protocol","","","A ring byte buffer used to operate byte streams","","","","","","","","","","","","","the capacity of the ring buffer","","","","","The command","current read slice","Payload data","Decode bytes and return consumed bytes and message","Encode message into byte array","","","Estimate encoded message size (must be greater than or …","","","","","","free space in bytes in the ring buffer","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Send a request to channel and wait for response","","the data in the ring buffer","","","Create a new <code>Channel</code> to read and write messages","","Read message from channel","","read data from upstream to fill the ring buffer","Read message until timeout","Reset the channel status This function is usually used to …","Reset the decoder status","Reset encoder","Set data terminal ready on port","skip bytes","","","","","","","","","","","","","","","","","create a ring buffer with capacity","","Create a new <code>Channel</code> with non-default ring buffer capacity","Write message to channel","","Write message to <code>std::io::Write</code> targets","","","","","","","","","sort scan points"],"i":[1,2,0,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,2,3,3,4,5,6,3,4,7,2,8,5,6,3,4,7,2,8,9,5,9,5,6,3,4,7,2,8,6,3,4,7,2,8,3,9,5,8,7,8,3,3,5,8,6,3,4,7,2,8,8,6,3,6,3,4,7,2,8,7,7,7,5,6,3,4,7,2,8,9,5,9,5,9,5,9,5,9,5,9,5,9,5,9,5,9,5,9,5,9,5,9,5,6,4,5,6,3,4,7,2,8,3,3,4,6,4,6,4,7,2,8,5,8,5,5,7,3,3,3,3,8,8,0,7,6,3,3,9,5,9,5,9,5,9,5,9,5,9,5,9,5,9,5,6,3,4,7,2,8,5,6,3,4,7,2,8,5,6,3,4,7,2,8,5,6,3,4,7,2,8,4,0,7,5,8,10,11,12,13,14,15,1,1,0,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,1,1,16,1,17,18,16,1,17,18,18,17,18,17,18,17,18,17,19,20,17,18,20,18,1,1,17,18,18,16,1,1,1,17,18,16,1,17,18,16,18,18,17,18,16,17,16,18,18,16,16,19,20,16,18,1,17,18,1,16,1,17,18,16,1,17,18,16,1,17,18,18,17,16,16,18,20,12,12,13,13,14,14,15,15,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["scanpoint",3]],["f32",0]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["result",6,[["bool",0]]]],[[["rplidardevice",3]],["result",6,[["bool",0]]]],[[["",0],["duration",3]],["result",6,[["bool",0]]]],[[["rplidardevice",3],["duration",3]],["result",6,[["bool",0]]]],[[["rplidarresponsedeviceinfo",3]],["rplidarresponsedeviceinfo",3]],[[["scanpoint",3]],["scanpoint",3]],[[["scanmode",3]],["scanmode",3]],[[["scanoptions",3]],["scanoptions",3]],[[["health",4]],["health",4]],[[["rplidarhostprotocol",3]],["rplidarhostprotocol",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["scanpoint",3],["scanpoint",3]],["ordering",4]],[[["",0]],["result",6]],[[["rplidardevice",3]],["result",6]],[[["rplidarhostprotocol",3]],["result",6]],[[],["scanoptions",3]],[[],["rplidarhostprotocol",3]],null,[[["scanpoint",3]],["f32",0]],[[["rplidardevice",3,[["serialport",8]]]]],[[["rplidarhostprotocol",3],["message",3]],["result",6,[["usize",0]]]],[[["rplidarresponsedeviceinfo",3],["rplidarresponsedeviceinfo",3]],["bool",0]],[[["scanpoint",3],["scanpoint",3]],["bool",0]],[[["scanmode",3],["scanmode",3]],["bool",0]],[[["scanoptions",3],["scanoptions",3]],["bool",0]],[[["health",4],["health",4]],["bool",0]],[[["rplidarhostprotocol",3],["rplidarhostprotocol",3]],["bool",0]],[[["rplidarhostprotocol",3],["message",3]],["result",6,[["usize",0]]]],null,null,[[["rplidarresponsedeviceinfo",3],["formatter",3]],["result",6]],[[["scanpoint",3],["formatter",3]],["result",6]],[[["scanmode",3],["formatter",3]],["result",6]],[[["scanoptions",3],["formatter",3]],["result",6]],[[["health",4],["formatter",3]],["result",6]],[[["rplidarhostprotocol",3],["formatter",3]],["result",6]],[[],["scanoptions",3]],null,[[["u16",0]],["scanoptions",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["result",6,[["vec",3,[["scanmode",3]]]]]],[[["rplidardevice",3]],["result",6,[["vec",3,[["scanmode",3]]]]]],[[["",0],["duration",3]],["result",6,[["vec",3,[["scanmode",3]]]]]],[[["rplidardevice",3],["duration",3]],["result",6,[["vec",3,[["scanmode",3]]]]]],[[["",0]],["result",6,[["health",4]]]],[[["rplidardevice",3]],["result",6,[["health",4]]]],[[["",0],["duration",3]],["result",6,[["health",4]]]],[[["rplidardevice",3],["duration",3]],["result",6,[["health",4]]]],[[["",0]],["result",6,[["rplidarresponsedeviceinfo",3]]]],[[["rplidardevice",3]],["result",6,[["rplidarresponsedeviceinfo",3]]]],[[["",0],["duration",3]],["result",6,[["rplidarresponsedeviceinfo",3]]]],[[["rplidardevice",3],["duration",3]],["result",6,[["rplidarresponsedeviceinfo",3]]]],[[["",0]],["result",6,[["u16",0]]]],[[["rplidardevice",3]],["result",6,[["u16",0]]]],[[["",0],["duration",3]],["result",6,[["u16",0]]]],[[["rplidardevice",3],["duration",3]],["result",6,[["u16",0]]]],[[["",0]],["result",6,[["vec",3,[["scanpoint",3]]]]]],[[["rplidardevice",3]],["result",6,[["vec",3,[["scanpoint",3]]]]]],[[["",0]],["result",6,[["scanpoint",3]]]],[[["rplidardevice",3]],["result",6,[["scanpoint",3]]]],[[["",0],["duration",3]],["result",6,[["scanpoint",3]]]],[[["rplidardevice",3],["duration",3]],["result",6,[["scanpoint",3]]]],[[["",0],["duration",3]],["result",6,[["vec",3,[["scanpoint",3]]]]]],[[["rplidardevice",3],["duration",3]],["result",6,[["vec",3,[["scanpoint",3]]]]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["scanpoint",3]],["bool",0]],[[["scanpoint",3]],["bool",0]],null,null,null,[[["rplidarresponsedeviceinfo",3],["rplidarresponsedeviceinfo",3]],["bool",0]],[[["scanmode",3],["scanmode",3]],["bool",0]],[[["scanoptions",3],["scanoptions",3]],["bool",0]],[[["health",4],["health",4]],["bool",0]],[[["rplidarhostprotocol",3],["rplidarhostprotocol",3]],["bool",0]],[[["channel",3,[["rplidarhostprotocol",3]]]],["rplidardevice",3]],[[],["rplidarhostprotocol",3]],[[["str",0]],["result",6,[["rplidardevice",3,[["ttyport",3]]]]]],[[["str",0]],["result",6,[["box",3,[["rplidardriver",8]]]]]],null,[[["scanpoint",3],["scanpoint",3]],["option",4,[["ordering",4]]]],null,[[["scanpoint",3]],["f32",0]],[[["scanpoint",3]],["f32",0]],[[["rplidarhostprotocol",3]]],[[["rplidarhostprotocol",3]]],null,null,null,[[["scanpoint",3],["f32",0]]],[[["scanpoint",3],["f32",0]]],[[["",0],["u16",0]],["result",6]],[[["rplidardevice",3],["u16",0]],["result",6]],[[["",0]],["result",6]],[[["rplidardevice",3]],["result",6]],[[["",0]],["result",6,[["scanmode",3]]]],[[["rplidardevice",3]],["result",6,[["scanmode",3]]]],[[["",0],["scanoptions",3]],["result",6,[["scanmode",3]]]],[[["rplidardevice",3],["scanoptions",3]],["result",6,[["scanmode",3]]]],[[["",0],["scanoptions",3],["duration",3]],["result",6,[["scanmode",3]]]],[[["rplidardevice",3],["scanoptions",3],["duration",3]],["result",6,[["scanmode",3]]]],[[["",0],["duration",3]],["result",6,[["scanmode",3]]]],[[["rplidardevice",3],["duration",3]],["result",6,[["scanmode",3]]]],[[["",0]],["result",6]],[[["rplidardevice",3]],["result",6]],[[["",0]],["result",6]],[[["rplidardevice",3]],["result",6]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["u16",0]],["scanoptions",3]],[[],["rplidardevice",3]],[[["rplidarhostprotocol",3],["message",3]],["result",6,[["usize",0]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["ringbytebuffer",3]],["usize",0]],[[["message",3]],["message",3]],[[["ringbytebuffer",3]],["ringbytebuffer",3]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[["ringbytebuffer",3]]],null,[[["",0]],["result",6]],[[["",0],["message",3]],["result",6,[["usize",0]]]],[[["message",3],["message",3]],["bool",0]],[[["ringbytebuffer",3],["ringbytebuffer",3]],["bool",0]],[[["",0],["message",3]],["result",6,[["usize",0]]]],[[["ringbytebuffer",3]],["result",6]],[[["rposerror",4],["formatter",3]],["result",6]],[[["rposerror",4],["formatter",3]],["result",6]],[[["message",3],["formatter",3]],["result",6]],[[["ringbytebuffer",3],["formatter",3]],["result",6]],[[["ringbytebuffer",3]],["usize",0]],[[]],[[["error",3]],["rposerror",4]],[[]],[[["error",3]],["rposerror",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["channel",3],["message",3],["duration",3]],["result",6,[["option",4,[["message",3]]]]]],[[["ringbytebuffer",3]],["bool",0]],[[["ringbytebuffer",3]],["usize",0]],[[["message",3],["message",3]],["bool",0]],[[["ringbytebuffer",3],["ringbytebuffer",3]],["bool",0]],[[],["channel",3]],[[["u8",0]],["message",3]],[[["channel",3]],["result",6,[["option",4,[["message",3]]]]]],[[["ringbytebuffer",3]],["result",6,[["usize",0]]]],[[["ringbytebuffer",3]],["result",6,[["usize",0]]]],[[["channel",3],["duration",3]],["result",6,[["option",4,[["message",3]]]]]],[[["channel",3]]],[[["",0]]],[[["",0]]],[[["channel",3],["bool",0]],["result",6]],[[["ringbytebuffer",3],["usize",0]],["usize",0]],[[["rposerror",4]],["option",4,[["error",8]]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["usize",0]],["ringbytebuffer",3]],[[["u8",0]],["message",3]],[[["usize",0]],["channel",3]],[[["channel",3],["message",3]],["result",6,[["usize",0]]]],[[["ringbytebuffer",3]],["result",6,[["usize",0]]]],[[["",0],["message",3]],["result",6,[["usize",0]]]],null,null,null,null,null,null,null,null,[[["vec",3]],["result",6]]],"p":[[4,"RposError"],[4,"Health"],[3,"ScanPoint"],[3,"ScanMode"],[3,"RplidarDevice"],[3,"RplidarResponseDeviceInfo"],[3,"ScanOptions"],[3,"RplidarHostProtocol"],[8,"RplidarDriver"],[13,"Warning"],[13,"Error"],[13,"IoError"],[13,"SerialPortError"],[13,"OperationFail"],[13,"ProtocolError"],[3,"Channel"],[3,"Message"],[3,"RingByteBuffer"],[8,"ProtocolDecoder"],[8,"ProtocolEncoder"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
